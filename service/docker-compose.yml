version: "3.8"

services:
  php:
    build: .
    ports:
      - "8055:80"
    depends_on:
      database:
        condition: service_healthy
      code-executor:
        condition: service_started
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-16}"
      CODE_EXECUTOR_HOST: "code-executor"
      CODE_EXECUTOR_PORT: "2376"
    restart: unless-stopped
    mem_limit: 1g
    cpus: 1

  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - database_data:/var/lib/postgresql/data:rw

  code-executor:
    image: docker:24-dind
    privileged: true
    environment:
      DOCKER_TLS_CERTDIR: ""
    ports:
      - "2376:2376"
    volumes:
      - code-executor-data:/var/lib/docker
    restart: unless-stopped
    mem_limit: 2g
    cpus: 2
    command: ["dockerd", "--host=tcp://0.0.0.0:2376", "--host=unix:///var/run/docker.sock", "--tls=false"]

  adminbot:
    build:
      context: .
      dockerfile: docker/adminbot/Dockerfile
    depends_on:
      - php
      - database
    environment:
      DATABASE_URL: "postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@database:5432/${POSTGRES_DB:-app}"
      APP_URL:         "http://php:80"
    restart: unless-stopped

volumes:
  database_data:
  code-executor-data: